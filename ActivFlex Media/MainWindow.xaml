<Window x:Class="ActivFlex.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:ActivFlex.Controls"
        xmlns:Converters="clr-namespace:ActivFlex.Converters"
        xmlns:ViewModels="clr-namespace:ActivFlex.ViewModels"
        xmlns:Navigation="clr-namespace:ActivFlex.Navigation"
        xmlns:Presentation="clr-namespace:ActivFlex.Presentation;assembly=ActivFlex-Presenter"
        mc:Ignorable="d"
        Title="ActivFlex Media" Height="835" Width="1640"
        WindowStyle="None" AllowsTransparency="True" Background="#494A52"
        WindowStartupLocation="CenterScreen" Icon="Images/ActivFlexIcon.ico" FontSize="18"
        StateChanged="Window_StateChanged" Loaded="Window_Loaded" PreviewKeyDown="Window_PreviewKeyDown" Closing="Window_Closing">

    <!-- Converter instances and window specific styles -->
    <Window.Resources>
        <Converters:NavItemIconConverter x:Key="NavIconConverter"/>
        <Converters:BooleanVisibilityConverter x:Key="BoolVisibilityConverter"/>
        <KeyTime x:Key="NavTreeFadeTime">0:0:0.2</KeyTime>
        <KeyTime x:Key="MediaBarFadeTime">0:0:0.2</KeyTime>
    </Window.Resources>

    <!-- Input command bindings -->
    <Window.InputBindings>
        <KeyBinding Command="{Binding ExitMode}" Key="Esc"/>
        <KeyBinding Command="{Binding BrowseUp}" Key="Backspace"/>
        <KeyBinding Command="{Binding IncreaseZoom}" Key="Add"/>
        <KeyBinding Command="{Binding IncreaseZoom}" Key="Add" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding DecreaseZoom}" Key="Subtract"/>
        <KeyBinding Command="{Binding DecreaseZoom}" Key="Subtract" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ResetZoom}" Key="NumPad0" Modifiers="Ctrl"/>
        <MouseBinding Command="{Binding ResetZoom}" Gesture="MiddleClick"/>
    </Window.InputBindings>

    <WindowChrome.WindowChrome>
        <!-- Height for the drag area of window title bar -->
        <WindowChrome CaptionHeight="35"/>
    </WindowChrome.WindowChrome>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="10" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="35" />
            <RowDefinition Height="60" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        
        <!-- Titlebar grid area -->
        <Grid Grid.ColumnSpan="3" VerticalAlignment="Top" Background="DarkGray">
            <!-- Left StackPanel: IsHitTestVisibleInChrome will prevent dragging on a click -->
            <StackPanel Height="35" WindowChrome.IsHitTestVisibleInChrome="True" VerticalAlignment="Center" HorizontalAlignment="Left" Orientation="Horizontal">
                <Label x:Name="lblTitleHeader" Content="ActivFlex Media" Style="{StaticResource Orkney}" FontSize="22" HorizontalAlignment="Left" Margin="5,2,0,0" VerticalAlignment="Top" FontWeight="Bold">
                    <Label.ContextMenu>
                        <ContextMenu FontSize="18" FontFamily="Segoue UI" FontWeight="Normal">
                            <MenuItem x:Name="ShowInfoMenuItem" Header="{Binding Localize[ShowInfo]}" Command="{Binding ShowInfo}"/>
                            <MenuItem x:Name="ToggleFullscreenMenuItem" Header="{Binding Localize[ToggleFullscreen]}" Click="ToggleFullscreenMenuItem_Click"/>
                            <Separator/>
                            <MenuItem x:Name="ExitMenuItem" Header="{Binding Localize[Exit]}" Command="{Binding ExitMode}"/>
                        </ContextMenu>
                    </Label.ContextMenu>
                </Label>
            </StackPanel>

            <!-- Right StackPanel: IsHitTestVisibleInChrome will prevent dragging on a click -->
            <StackPanel Height="35" WindowChrome.IsHitTestVisibleInChrome="True" VerticalAlignment="Center" HorizontalAlignment="Right" Orientation="Horizontal">
                <Controls:IconButton Width="30" x:Name="btnMinimize" 
                             ContentDefault="{StaticResource MinimizeIcon}" 
                             ContentHover="{StaticResource MinimizeIconHover}" 
                             ContentPressed="{StaticResource MinimizeIconPressed}"/>

                <Controls:IconButton Width="30" x:Name="btnMaximize" 
                             ContentDefault="{StaticResource MaximizeIcon}" 
                             ContentHover="{StaticResource MaximizeIconHover}" 
                             ContentPressed="{StaticResource MaximizeIconPressed}"/>

                <Controls:IconButton Width="30" x:Name="btnClose" 
                             ContentDefault="{StaticResource CloseIcon}" 
                             ContentHover="{StaticResource CloseIconHover}" 
                             ContentPressed="{StaticResource CloseIconPressed}"/>
            </StackPanel>
        </Grid>
        
        <!-- Navigation area -->
        <TreeView x:Name="NavView" Grid.Row="1" Grid.RowSpan="2" ItemsSource="{Binding NavItems}" Margin="10,10,0,0" Background="Transparent" 
                  Height="Auto" Width="240" HorizontalContentAlignment="Stretch" Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
            <TreeView.ItemTemplate>
                <!-- Bind the children of each item to create a recursive pattern -->
                <HierarchicalDataTemplate ItemsSource="{Binding NavChildren}">

                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter Height="30" Width="20" Content="{Binding Converter={StaticResource NavIconConverter}}"/>
                        <TextBlock Text="{Binding DisplayName}" Visibility="{Binding NameBox}" Foreground="#E6E6E6" VerticalAlignment="Center" Margin="5,0,0,0"/>
                        <TextBox x:Name="EditBox" Width="150" Text="{Binding DisplayName, Mode=TwoWay}" Visibility="{Binding EditBox}" LostFocus="EditBox_LostFocus" KeyDown="EditBox_KeyDown"/>
                    </StackPanel>

                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">

                    <!-- Converter instances -->
                    <Style.Resources>
                        <Converters:TreeViewItemMarginConverter MarginMultiplier="19" x:Key="MarginConverter"/>
                        <Converters:InvertBoolConverter x:Key="InvertBoolConverter"/>

                        <!-- Context menu for the media library root - should be linked the main data context via the tag -->
                        <ContextMenu x:Key="NavMediaMenu" DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                            <MenuItem Header="{Binding Localize[NewLibrary]}" Command="{Binding CreateMediaLibrary}"/>
                        </ContextMenu>

                        <!-- Context menu for the media library items -->
                        <ContextMenu x:Key="NavMediaLibraryMenu" DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                            <MenuItem Header="{Binding Localize[Open]}" Command="{Binding SelectNavigationLibrary}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaLibrary, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                            <Separator/>
                            <MenuItem Header="{Binding Localize[New]}">
                                <MenuItem Header="{Binding Localize[MediaContainer]}" Command="{Binding CreateMediaContainer}"
                                          CommandParameter="{Binding PlacementTarget.DataContext.MediaLibrary.RootContainer, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                            </MenuItem>

                            <MenuItem Header="{Binding Localize[Configure]}" Command="{Binding ConfigureMediaLibrary}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaLibrary, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                            <MenuItem Header="{Binding Localize[Delete]}" Command="{Binding DeleteMediaLibrary}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaLibrary, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                        </ContextMenu>

                        <!-- Context menu for the media container items -->
                        <ContextMenu x:Key="NavMediaContainerMenu" DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                            <MenuItem Header="{Binding Localize[Open]}" Command="{Binding SelectMediaContainer}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaContainer, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                            <Separator/>
                            <MenuItem Header="{Binding Localize[New]}">
                                <MenuItem Header="{Binding Localize[MediaContainer]}" Command="{Binding CreateMediaContainer}"
                                          CommandParameter="{Binding PlacementTarget.DataContext.MediaContainer, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                            </MenuItem>

                            <MenuItem Header="{Binding Localize[Rename]}" Command="{Binding RenameMediaContainer}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaContainer, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                            <MenuItem Header="{Binding Localize[Delete]}" Command="{Binding DeleteMediaContainer}"
                                      CommandParameter="{Binding PlacementTarget.DataContext.MediaContainer, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                        </ContextMenu>
                    </Style.Resources>

                    <!-- Focusable should be false on expandable items to prevent their selection -->
                    <EventSetter Event="TreeViewItem.Collapsed" Handler="NavViewItem_Collapsed"/>
                    <Setter Property="Focusable" Value="{Binding Path=HasItems, Converter={StaticResource InvertBoolConverter}, RelativeSource={RelativeSource Self}}"/>
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="Padding" Value="1,0,0,0"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                <StackPanel MouseDown="NavViewItem_MouseDown">
                                    <Border Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Padding="{TemplateBinding Padding}"
                                            Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">

                                        <!-- Pass the TreeViewItem to the MarginConverter, to get the correct margin based on the item depth -->
                                        <Grid Margin="{Binding Converter={StaticResource MarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="19" />
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>

                                            <!-- The toggle button should cover the content presenter (when visible), therefore define the content presenter first -->
                                            <ContentPresenter x:Name="PART_Header" 
                                                      Grid.Column="1" 
                                                      ContentSource="Header" 
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                            <ToggleButton x:Name="Expander"
                                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                                  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ClickMode="Press"
                                                  Grid.ColumnSpan="2"/>
                                        </Grid>

                                        <!-- Use the MouseOver-trigger of the border, because on the TreeViewItem the event would bubble up in the visual tree -->
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="{StaticResource TreeViewItem.MouseOver.Color}"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                    <ItemsPresenter x:Name="ItemsHost" />
                                </StackPanel>

                                <!-- TreeViewItem triggers -->
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Tag}" Value="{x:Static Navigation:NavTag.MediaLibraryRoot}">
                                        <Setter TargetName="Bd" Property="ContextMenu" Value="{StaticResource NavMediaMenu}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Tag}" Value="{x:Static Navigation:NavTag.MediaLibrary}">
                                        <Setter TargetName="Bd" Property="ContextMenu" Value="{StaticResource NavMediaLibraryMenu}"/>
                                        <Setter TargetName="Expander" Property="Grid.ColumnSpan" Value="1"/>
                                        <Setter Property="Focusable" Value="True"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Tag}" Value="{x:Static Navigation:NavTag.MediaContainer}">
                                        <Setter TargetName="Bd" Property="ContextMenu" Value="{StaticResource NavMediaContainerMenu}"/>
                                        <Setter TargetName="Expander" Property="Grid.ColumnSpan" Value="1"/>
                                        <Setter Property="Focusable" Value="True"/>
                                    </DataTrigger>
                                    <Trigger Property="IsExpanded" Value="false">
                                        <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                    </Trigger>
                                    <Trigger Property="HasItems" Value="false">
                                        <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                    </Trigger>

                                    <!-- Selection trigger -->
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter Property="Background" TargetName="Bd" Value="{StaticResource TreeViewItem.Selected.Color}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>

                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <!-- Optional: Use a VirtualizingPanel to only evaluate the items that should actually be displayed -->
                    <Style.Triggers>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>

            <!-- TreeView visibility toggle animation -->
            <TreeView.Style>
                <Style>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding NavVisible}" Value="true">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" BeginTime="00:00:00">
                                            <SplineDoubleKeyFrame KeyTime="{StaticResource NavTreeFadeTime}" Value="240"/>
                                        </DoubleAnimationUsingKeyFrames>

                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" BeginTime="00:00:00">
                                            <SplineThicknessKeyFrame KeyTime="{StaticResource NavTreeFadeTime}" Value="10,10,0,0"/>
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" BeginTime="00:00:00">
                                            <SplineDoubleKeyFrame KeyTime="{StaticResource NavTreeFadeTime}" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>

                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" BeginTime="00:00:00">
                                            <SplineThicknessKeyFrame KeyTime="{StaticResource NavTreeFadeTime}" Value="0,10,0,0"/>
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.Style>
        </TreeView>

        <!-- Split area between the navigation tree view and the presentation area -->
        <Button Command="{Binding ToggleNavVisibility}" Style="{StaticResource toggleNavButton}" Grid.Row="1" Grid.Column="1" Grid.RowSpan="2" Width="10" Height="40"/>

        <!-- Media header presentation area -->
        <Grid Grid.Row="1" Grid.Column="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="45"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="310"/>
            </Grid.ColumnDefinitions>

            <Controls:IconButton x:Name="BtnBack" Width="35" Height="35" Grid.Column="0" Margin="10,0,0,0" VerticalAlignment="Center"
                                 Command="{Binding BrowseUp}"
                                 Visibility="{Binding PathAvailable, Converter={StaticResource BoolVisibilityConverter}}"
                                 ContentDefault="{StaticResource BackIcon}"
                                 ContentHover="{StaticResource BackIconHover}"
                                 ContentPressed="{StaticResource BackIconPressed}"/>

            <Controls:PathNavigator Grid.Column="1" Margin="5,0,0,0" Path="{Binding Path}" Command="{Binding BrowseFileSystem}"/>
            
            <Slider x:Name="ZoomSlider"
                    Width="200" 
                    Grid.Column="2"
                    Margin="0,0,100,0"
                    Minimum="0.5"
                    Maximum="3.0"
                    Focusable="False"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Right"
                    IsSnapToTickEnabled="True"
                    Ticks="0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0"
                    TickPlacement="TopLeft"
                    Value="{Binding Zoom, Mode=TwoWay}"/>

            <!-- Media control area toggle button -->
            <Button x:Name="MediaBarToggle" Command="{Binding ToggleMediaBarVisibility}" Style="{StaticResource ToggleMediaBarStyle}"
                    Grid.Column="2" Height="20" Width="20" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,60,0"/>

            <!-- Info launch button -->
            <Button x:Name="ShowInfoButton" Command="{Binding ShowInfo}" Style="{StaticResource ShowInfoButtonStyle}"
                    Grid.Column="2" Height="22" Width="22" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,22,0"/>

        </Grid>

        <!-- Media presentation area -->
        <ScrollViewer x:Name="MediaScrollViewer" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Grid.Row="2" Grid.Column="3" PreviewMouseWheel="MediaScrollViewer_PreviewMouseWheel">
            <ItemsControl x:Name="MediaItemControl" ItemsSource="{Binding FileSystemItems}" Focusable="False">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        
                        <!-- Wrapping area for media thumbnails -->
                        <WrapPanel x:Name="MediaWrapPanel" FlowDirection="LeftToRight">
                            <WrapPanel.LayoutTransform>
                                <ScaleTransform x:Name="MediaScaleTransform" ScaleX="{Binding Zoom}" ScaleY="{Binding Zoom}"/>
                            </WrapPanel.LayoutTransform>

                            <WrapPanel.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard Name="MyStoryboard">
                                            <DoubleAnimation x:Name="thumbScaleAnimationX"
                                                             Storyboard.TargetName="MediaScaleTransform"
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                             To="{Binding Zoom, NotifyOnTargetUpdated=True}" Duration="0:0:0.2"/>

                                            <DoubleAnimation x:Name="thumbScaleAnimationY"
                                                             Storyboard.TargetName="MediaScaleTransform"
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                             To="{Binding Zoom, NotifyOnTargetUpdated=True}" Duration="0:0:0.2"/>

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </WrapPanel.Triggers>
                        </WrapPanel>
                        
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.Resources>
                    
                    <!-- Directory template -->
                    <DataTemplate DataType="{x:Type ViewModels:DirectoryItemViewModel}">
                        <Controls:DirectoryThumbnail Margin="20,5,20,20"
                                                     CanSelect="False"
                                                     Proxy="{Binding Proxy}"
                                                     Click="{Binding DataContext.BrowseFileSystem,
                                                             RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                     Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">

                            <Controls:DirectoryThumbnail.ContextMenu>
                                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="{Binding Localize[Open]}" 
                                              Command="{Binding BrowseFileSystem}"
                                              CommandParameter="{Binding PlacementTarget.Proxy.Path, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Controls:DirectoryThumbnail.ContextMenu>
                        </Controls:DirectoryThumbnail>
                    </DataTemplate>

                    <!-- MediaImage template -->
                    <DataTemplate DataType="{x:Type ViewModels:ImageItemViewModel}">
                        <Controls:ImageThumbnail Margin="20,5,20,20"
                                                 Width="150"
                                                 Height="150"
                                                 CanSelect="False"
                                                 Proxy="{Binding Proxy}"
                                                 Text="{Binding Name}"
                                                 Image="{Binding ThumbImage}"
                                                 DefaultContent="{StaticResource PictureIcon}"
                                                 Click="{Binding DataContext.DefaultImageLaunch,
                                                         RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                 Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">

                            <Controls:ImageThumbnail.ContextMenu>
                                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="{Binding Localize[Open]}" 
                                              Command="{Binding LaunchPresenter}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                                    <MenuItem Header="{Binding Localize[OpenProcess]}" 
                                              Command="{Binding LaunchDefault}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Controls:ImageThumbnail.ContextMenu>
                        </Controls:ImageThumbnail>
                    </DataTemplate>

                    <!-- MediaMusic template -->
                    <DataTemplate DataType="{x:Type ViewModels:MusicItemViewModel}">
                        <Controls:MusicThumbnail Margin="20,5,20,20"
                                                 Width="150"
                                                 Height="150"
                                                 CanSelect="False"
                                                 Proxy="{Binding Proxy}"
                                                 Text="{Binding Name}"
                                                 Extension="{Binding Extension}"
                                                 Click="{Binding DataContext.DefaultMusicLaunch,
                                                         RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                 Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">

                            <Controls:MusicThumbnail.ContextMenu>
                                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="{Binding Localize[Play]}" 
                                              Command="{Binding LaunchMusicPlayback}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                                    <MenuItem Header="{Binding Localize[PlayProcess]}" 
                                              Command="{Binding LaunchDefault}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Controls:MusicThumbnail.ContextMenu>
                        </Controls:MusicThumbnail>
                    </DataTemplate>

                    <!-- MediaVideo template -->
                    <DataTemplate DataType="{x:Type ViewModels:VideoItemViewModel}">
                        <Controls:ImageThumbnail Margin="20,5,20,20"
                                                 Width="150"
                                                 Height="150"
                                                 CanSelect="False"
                                                 Proxy="{Binding Proxy}"
                                                 Text="{Binding Name}"
                                                 Image="{Binding ThumbImage}"
                                                 VideoIndicator="{Binding IndicatorVisibility}"
                                                 DefaultContent="{StaticResource VideoIcon}"
                                                 Click="{Binding DataContext.DefaultVideoLaunch,
                                                         RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                 Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">

                            <Controls:ImageThumbnail.ContextMenu>
                                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="{Binding Localize[Play]}" 
                                              Command="{Binding LaunchVideoPlayback}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                                    <MenuItem Header="{Binding Localize[PlayProcess]}" 
                                              Command="{Binding LaunchDefault}"
                                              CommandParameter="{Binding PlacementTarget.Proxy, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Controls:ImageThumbnail.ContextMenu>
                        </Controls:ImageThumbnail>
                    </DataTemplate>

                </ItemsControl.Resources>
            </ItemsControl>
        </ScrollViewer>

        <!-- Media control area -->
        <Grid x:Name="MediaControlBar" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3" Height="60" Margin="0,5,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="13"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- Current time label -->
            <Label x:Name="CurrentTimeLbl" Content="--:--" Foreground="White" Visibility="{Binding ShowTimelineSideLabels}" Grid.Column="0" Grid.RowSpan="2" FontSize="16" FontWeight="Bold" Margin="0,-10,0,0"/>

            <!-- Timeline -->
            <Slider Name="TimeSlider" Grid.Column="1" Grid.ColumnSpan="1" Minimum="0" Maximum="{Binding MaxPlaybackTime}" Value="{Binding CurrentPlaybackTime, Mode=TwoWay}" 
                    IsMoveToPointEnabled="True" Style="{StaticResource TimeSliderStyle}" ValueChanged="TimeSlider_ValueChanged" PreviewMouseLeftButtonDown="TimeSlider_PreviewMouseLeftButtonDown" Thumb.DragCompleted="TimeSlider_DragCompleted"/>

            <!-- Maximum time label -->
            <Label x:Name="MaxTimeLbl" Content="--:--" Foreground="White" Visibility="{Binding ShowTimelineSideLabels}" Grid.Column="2" Grid.RowSpan="2" FontSize="16" FontWeight="Bold" Margin="0,-10,0,0"/>

            <!-- Media playback info area -->
            <ContentPresenter x:Name="MediaInfoIcon" Content="{StaticResource MusicMediaIcon}" Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="43" Margin="5,-4,0,0"/>
            <Grid x:Name="MediaInfoGrid" Background="Transparent" Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Left" Margin="55,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="45"/>
                </Grid.RowDefinitions>
                <TextBlock x:Name="MediaInfoName" Text="{Binding MediaInfoName}" FontSize="15" Width="195" Height="40" TextWrapping="Wrap" Margin="0,0,0,0" Foreground="#EBEBEB" FontWeight="Bold" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="2"/>
            </Grid>

            <!-- Media control bar stack -->
            <StackPanel x:Name="MediaBarStack" Grid.Column="1" Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,4">
                <Button x:Name="StopBtn" Style="{StaticResource StopStyle}" Width="25" Command="{Binding Stop}" Margin="20,0,0,0"/>
                <Button x:Name="PreviousBtn" Width="25" Margin="17,0,0,0" Style="{StaticResource NextStyle}" Command="{Binding Previous}">
                    <Button.LayoutTransform>
                        <RotateTransform Angle="180"/>
                    </Button.LayoutTransform>
                </Button>
                <ToggleButton x:Name="PlayPauseBtn" Margin="12,0,12,0" Style="{StaticResource PlayPauseStyle}" IsChecked="{Binding PlayMode}"/>
                <Button x:Name="NextBtn" Width="25" Margin="0,0,17,0" Style="{StaticResource NextStyle}" Command="{Binding Next}"/>
                <ToggleButton x:Name="MuteBtn" Width="25" Margin="0,0,20,0"
                              Style="{StaticResource MuteStyle}"
                              IsChecked="{Binding IsMuted, ElementName=MediaPlayer, Mode=TwoWay}"/>

                <Slider x:Name="VolumeSlider" Margin="0,6,-130,0" Minimum="0.0" Maximum="1.0" Width="130" Height="20"
                        Style="{StaticResource VolumeSliderStyle}" TickFrequency="0.25" IsSnapToTickEnabled="False" TickPlacement="BottomRight"
                        IsMoveToPointEnabled="True" Value="{Binding Path=Volume, ElementName=MediaPlayer, Mode=TwoWay}"/>
            </StackPanel>

            <!-- Media control visibility toggle animation -->
            <Grid.Style>
                <Style>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding MediaBarVisible}" Value="true">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" BeginTime="00:00:00">
                                            <SplineDoubleKeyFrame KeyTime="{StaticResource MediaBarFadeTime}" Value="60"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" BeginTime="00:00:00">
                                            <SplineDoubleKeyFrame KeyTime="{StaticResource MediaBarFadeTime}" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>

        <!-- Media playback area -->
        <ContentControl x:Name="MediaBorder" Visibility="{Binding ShowVideoPlayback}" Grid.Row="1" Grid.Column="1" PreviewMouseDoubleClick="MediaBorder_PreviewMouseDoubleClick">
            <Border Background="Black">
                <MediaElement x:Name="MediaPlayer" LoadedBehavior="Manual" UnloadedBehavior="Manual" MediaOpened="MediaPlayer_MediaOpened" MediaEnded="MediaPlayer_MediaEnded"/>
            </Border>
        </ContentControl>
        
        

        <!-- Image presentation control -->
        <Presentation:ImagePresenter x:Name="MediaPresenter" Grid.Row="1" Grid.Column="1" Grid.RowSpan="1" Grid.ColumnSpan="1"
                                     Visibility="{Binding ImagePresentActive, Converter={StaticResource BoolVisibilityConverter}}"
                                     Image="{Binding ImagePresentData}" PreviewMouseDown="MediaPresenter_PreviewMouseDown"
                                     PreviewMouseDoubleClick="MediaPresenter_PreviewMouseDoubleClick"/>

        <!-- Window border -->
        <Border x:Name="outerBorder" Grid.RowSpan="4" Grid.ColumnSpan="3" 
                BorderThickness="1"
                BorderBrush="#7C7C82">
        </Border>

    </Grid>
</Window>